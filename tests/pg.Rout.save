
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RPostgreSQL)
Loading required package: DBI
> library(sf)
Linking to GEOS 3.5.0, GDAL 2.1.0
> library(sp)
> if (Sys.getenv("USER") %in% c("travis", "edzer")) {
+   data(meuse)
+   sf = st_as_sf(meuse, coords = c("x", "y"), crs = 28992)
+   conn = dbConnect(PostgreSQL(), dbname = "postgis")
+   st_write_db(conn, sf, "meuse_tbl")
+   st_write_db(conn, sf, "meuse_tbl2", binary = FALSE)
+   x = st_read_db(conn, query = "select * from meuse_tbl limit 30;")
+   y = st_read_db(conn, "meuse_tbl2") 
+   dbDisconnect(conn)
+ }
Error in postgresqlExecStatement(conn, statement, ...) : 
  RS-DBI driver: (could not Retrieve the result : ERROR:  column "wkb_geometry" of relation "meuse_tbl" already exists
CONTEXT:  SQL statement "ALTER TABLE public.meuse_tbl ADD COLUMN wkb_geometry geometry(Point, 0)"
PL/pgSQL function addgeometrycolumn(character varying,character varying,character varying,character varying,integer,character varying,integer,boolean) line 110 at EXECUTE statement
SQL statement "SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7)"
PL/pgSQL function addgeometrycolumn(character varying,character varying,character varying,integer,character varying,integer,boolean) line 5 at SQL statement
)
In addition: Warning message:
In postgresqlWriteTable(conn, name, value, ...) :
  table meuse_tbl exists in database: aborting assignTable
[1] TRUE
Warning message:
In postgresqlQuickSQL(conn, statement, ...) :
  Could not create executeSELECT AddGeometryColumn('','meuse_tbl','wkb_geometry','0','POINT',2);
> 
> options(warn = 2) # turn into error
> if (Sys.getenv("USER") %in% c("edzer", "travis")) {
+ # if (Sys.getenv("USER") %in% c("edzer")) {
+   cn = dbConnect(PostgreSQL(), dbname = "postgis")
+   round_trip = function(cn, wkt) {
+   	query = paste0("SELECT '", wkt, "'::geometry;")
+ 	returnstr = suppressWarnings(dbGetQuery(cn, query)$geometry)
+ 	# print(returnstr)
+   	n = nchar(returnstr)/2
+     wkb = lapply(returnstr, function(y) as.raw(as.numeric(paste0("0x", 
+   	  sapply(1:n, function(x) substr(y, (x-1)*2+1, x*2))))))
+   	class(wkb) = "WKB"
+     ret = st_as_sfc(wkb, EWKB = TRUE)
+ 	cat(returnstr, "\n")
+     cat(paste(wkt, "<-->", st_as_text(ret, EWKT=TRUE)[[1]], "\n"))
+ 	invisible(ret)
+   }
+   round_trip(cn, "SRID=4326;POINTM(0 0 0)")
+   round_trip(cn, "POINTZ(0 0 0)")
+   round_trip(cn, "POINTZM(0 0 0 0)")
+   round_trip(cn, "POINT(0 0)")
+   round_trip(cn, "LINESTRING(0 0,1 1,2 2)")
+   round_trip(cn, "MULTIPOINT(0 0,1 1,2 2)")
+   round_trip(cn, "POLYGON((0 0,1 0,1 1,0 0))")
+   round_trip(cn, "MULTIPOLYGON(((0 0,1 0,1 1,0 0)),((2 2,3 2,3 3,2 2)))")
+   round_trip(cn, "MULTIPOLYGON(((0 0,1 0,1 1,0 0),(.2 .2,.8 .2, .8 .8, .2 .2)),((2 2,3 2,3 3,2 2)))")
+   round_trip(cn, "MULTILINESTRING((0 0,1 0,1 1,0 0),(.2 .2,.8 .2, .8 .8, .2 .2),(2 2,3 2,3 3,2 2))")
+ 
+ 
+   #options(warn = -1)
+   #query = paste0("SELECT wkb_geometry from meuse limit 2;")
+   #wkb = as.list(dbGetQuery(cn, query)$wkb_geometry)
+   #class(wkb) = "WKB"
+   #ret = st_as_sfc(wkb, EWKB = TRUE)
+   #ret 
+ 
+   #m = st_read_db(cn, query = "select * from meuse;")
+   dbDisconnect(cn)
+ }
0101000060E6100000000000000000000000000000000000000000000000000000 
SRID=4326;POINTM(0 0 0) <--> SRID=4326;POINTM(0 0 0) 
0101000080000000000000000000000000000000000000000000000000 
POINTZ(0 0 0) <--> POINTZ(0 0 0) 
01010000C00000000000000000000000000000000000000000000000000000000000000000 
POINTZM(0 0 0 0) <--> POINTZM(0 0 0 0) 
010100000000000000000000000000000000000000 
POINT(0 0) <--> POINT(0 0) 
01020000000300000000000000000000000000000000000000000000000000F03F000000000000F03F00000000000000400000000000000040 
LINESTRING(0 0,1 1,2 2) <--> LINESTRING(0 0, 1 1, 2 2) 
0104000000030000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F010100000000000000000000400000000000000040 
MULTIPOINT(0 0,1 1,2 2) <--> MULTIPOINT(0 0, 1 1, 2 2) 
0103000000010000000400000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000 
POLYGON((0 0,1 0,1 1,0 0)) <--> POLYGON((0 0, 1 0, 1 1, 0 0)) 
0106000000020000000103000000010000000400000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000000000000000000000000103000000010000000400000000000000000000400000000000000040000000000000084000000000000000400000000000000840000000000000084000000000000000400000000000000040 
MULTIPOLYGON(((0 0,1 0,1 1,0 0)),((2 2,3 2,3 3,2 2))) <--> MULTIPOLYGON(((0 0, 1 0, 1 1, 0 0)), ((2 2, 3 2, 3 3, 2 2))) 
0106000000020000000103000000020000000400000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000040000009A9999999999C93F9A9999999999C93F9A9999999999E93F9A9999999999C93F9A9999999999E93F9A9999999999E93F9A9999999999C93F9A9999999999C93F0103000000010000000400000000000000000000400000000000000040000000000000084000000000000000400000000000000840000000000000084000000000000000400000000000000040 
MULTIPOLYGON(((0 0,1 0,1 1,0 0),(.2 .2,.8 .2, .8 .8, .2 .2)),((2 2,3 2,3 3,2 2))) <--> MULTIPOLYGON(((0 0, 1 0, 1 1, 0 0), (0.2 0.2, 0.8 0.2, 0.8 0.8, 0.2 0.2)), ((2 2, 3 2, 3 3, 2 2))) 
01050000000300000001020000000400000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000000000000000000000000102000000040000009A9999999999C93F9A9999999999C93F9A9999999999E93F9A9999999999C93F9A9999999999E93F9A9999999999E93F9A9999999999C93F9A9999999999C93F01020000000400000000000000000000400000000000000040000000000000084000000000000000400000000000000840000000000000084000000000000000400000000000000040 
MULTILINESTRING((0 0,1 0,1 1,0 0),(.2 .2,.8 .2, .8 .8, .2 .2),(2 2,3 2,3 3,2 2)) <--> MULTILINESTRING((0 0, 1 0, 1 1, 0 0), (0.2 0.2, 0.8 0.2, 0.8 0.8, 0.2 0.2), (2 2, 3 2, 3 3, 2 2)) 
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  1.060   0.292   2.186 
